# -*- coding: utf-8 -*-
"""Copy of  jaseela-MNIST final code-school.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11zKdT2YXelWAVcjWDnCcqAexmLACYBKQ

**Digit Recognition Using Machine Learning**

Here is a small example for recognizing digit using MNIST dataset.
"""

from tensorflow.keras import datasets,layers,models,Sequential
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.layers import Dense, Conv2D, Flatten, MaxPooling2D
import matplotlib.pyplot as plt
from google.colab import files
from io import BytesIO
from PIL import Image,ImageOps,ImageEnhance
from tensorflow.keras.preprocessing.image import img_to_array
from keras.layers.normalization import BatchNormalization
import tensorflow as tf

(X_train, y_train), (X_test, y_test) = datasets.mnist.load_data()

i=0; j=0; out = []
while i<10:
    if i == y_train[j]:
        out.append(X_train[j])
        i+=1
    j+=1
plt.figure(figsize=(10, 4))
for i, x in enumerate(out):
    plt.subplot(2, 5, i+1); plt.axis('off')
    plt.imshow(x, cmap='gray')
plt.show()

X_train.shape, y_train.shape, X_test.shape,y_test.shape



X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)
X_test = X_test.reshape(X_test.shape[0], 28, 28, 1)



print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)



X_train = X_train / 255.0
X_test = X_test / 255.0

print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

model = Sequential()
model.add(Conv2D(filters=64, kernel_size = (3,3), activation="relu", input_shape=(28,28,1)))
model.add(Conv2D(filters=64, kernel_size = (3,3), activation="relu"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(BatchNormalization())

model.add(Conv2D(filters=128, kernel_size = (3,3), activation="relu"))
model.add(Conv2D(filters=128, kernel_size = (3,3), activation="relu"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(BatchNormalization())

model.add(Conv2D(filters=128, kernel_size = (3,3), activation="relu"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(BatchNormalization())

model.add(Conv2D(filters=256, kernel_size = (1,1), activation="relu"))
model.add(MaxPooling2D(pool_size=(1,1)))
model.add(BatchNormalization())

model.add(Flatten())
model.add(BatchNormalization())

model.add(Dense(512,activation="relu"))
model.add(Dense(10,activation="softmax"))
model.summary()



loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)

model.compile(optimizer='adamax', loss=loss_fn, metrics=['accuracy'])

TrainingLog=model.fit(X_train, y_train,epochs=10, validation_split=0.1)

model.evaluate(X_test, y_test)

image_index = 0
plt.imshow(X_test[image_index].reshape(28, 28),cmap='Greys')

pred = model.predict(X_test[image_index].reshape(1, 28, 28, 1))
print(pred.argmax())

"""**Now let us try our own handwritten digits. **


"""

# load the hand written image  from your Desktop/Laptop
uploaded = files.upload()
pic = Image.open(BytesIO(uploaded['eight.png']))
plt.imshow(pic)

pic1 = pic.resize((28,28))
plt.imshow(pic1)
pic1.size

pic2 = ImageOps.grayscale(pic1)
plt.imshow(pic2,cmap='gray')

pic2.size

Bright = ImageEnhance.Brightness(pic2)
Bright_pic = Bright.enhance(4.8)
plt.imshow(Bright_pic,cmap='gray')

pic3 = img_to_array(Bright_pic)
pic3 = pic3.reshape(1, 28, 28, 1)
predictions = model.predict(pic3)
print("The Number predicted is",predictions.argmax())